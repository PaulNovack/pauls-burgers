<template>
  <div class="flex flex-1 bg-orange-50">
    <!-- Left Column (Order) -->
    <div class="w-4/14 p-2 font-fredoka text-xl text-center bg-cyan-100">
      <div class="p-4">
        <h2 class="text-xl mb-3 border-b-2">Your Order</h2>

        <!-- Record / Controls -->
        <div class="flex items-center justify-between mb-3">
          <RecordButton
              endpoint="/order/asr"
              @update:order="handleUpdate"
              @transcript="handleTranscript"
              @tts_transcript="handleTTS"
          />
          <button
              class="text-xs px-3 py-1 rounded bg-gray-900 text-white"
              @click="sendTextCommand('clear order')"
              title="Clear order in session"
          >
            Clear
          </button>
        </div>
        <div class="flex items-center justify-between mb-3">
          <button @click="playDing" class="px-3 py-2 rounded bg-gray-900 text-white text-sm">
            Play test sound
          </button>

          <AudioPlayer
              ref="player"
              @ready="() => console.log('buffered and ready')"
              @started="(info) => console.log('started', info)"
              @ended="() => console.log('ended')"
              @error="(e) => console.error('audio error', e)"
          />
        </div>


        <div class="grid grid-cols-[64px_1fr_auto] gap-3 items-center">
          <!-- lines -->
          <template v-if="myOrder.length">
            <template v-for="line in myOrder" :key="lineKey(line)">
              <div class="text-sm text-right">({{ line.quantity }})</div>

              <div class="text-sm text-left leading-tight">
                #{{ line.id }} {{ line.name }}
                <span v-if="line.size">({{ line.size }})</span>

                <!-- Add / Without line -->
                <div
                    v-if="(line.add && line.add.length) || (line.remove && line.remove.length)"
                    class="mt-1 text-xs"
                >
                  <span v-if="line.add && line.add.length">
                    Add: {{ (line.add || []).join(', ') }}
                  </span>
                  <span v-if="line.remove && line.remove.length">
                    <template v-if="line.add && line.add.length"> • </template>
                    Without: {{ (line.remove || []).join(', ') }}
                  </span>
                </div>
              </div>

              <div class="text-sm text-right font-medium">
                {{ formatPrice(line.price * line.quantity) }}
              </div>
            </template>
          </template>

          <div v-else class="col-span-3 text-sm text-gray-600 py-4">
            Press the Record button to start
            <div>&nbsp;</div>

            <div>Say something like:</div>
            <div>&nbsp;</div>
            <div><em>“add a #3 with ketchup and mustard, without onions”</em></div>
            <div><em>“add a #5 without onion rings”</em></div>
            <div><em>“add a Barbecue Burger without onion rings”</em></div>
            <div><em>“add a large Fries with Ketchup”</em></div>
            <div><em>“Remove cheeseburger”</em></div>
            <div>&nbsp;</div>
            <div><em>“Clear Order”</em> or press clear button to start over</div>
          </div>

          <!-- totals -->
          <div class="col-span-3 border-t border-gray-900 my-2"></div>

          <div></div>
          <div class="text-sm text-gray-600 text-right">Subtotal</div>
          <div class="text-sm">{{ formatPrice(subtotal) }}</div>

          <div></div>
          <div class="text-sm text-gray-600 text-right">Tax (8%)</div>
          <div class="text-sm text-right">{{ formatPrice(tax) }}</div>

          <div class="col-span-3 border-t border-gray-900 my-2"></div>

          <div></div>
          <div class="text-sm font-semibold text-right">Total</div>
          <div class="text-sm font-semibold text-right">{{ formatPrice(total) }}</div>
        </div>
      </div>
    </div>

    <!-- Middle Column (Burgers) -->
    <div class="w-5/14 pt-2 px-2">
      <section>
        <header class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
          <h2 class="text-xl font-semibold font-fredoka"><u>Burgers</u></h2>
        </header>

        <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-2 gap-1">
          <article
              v-for="item in burgers"
              :key="item.id"
              class="p-1"
          >
            <div class="flex items-start justify-between gap-3">
              <h3 class="text-md font-semibold leading-snug font-fredoka">#{{ item.id }} {{
                  item.name
                }}</h3>
              <div
                  class="shrink-0 rounded-full px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-800">
                {{ formatPrice(item.price) }}
              </div>
            </div>

            <p
                v-if="item.type === 'burger' && item.toppings?.length"
                class="mt-2 text-sm text-gray-600 dark:text-gray-300"
            >
              <span class="text-sm">Toppings:</span>
              {{ (item.toppings || []).join(', ') }}
            </p>
          </article>
        </div>
      </section>
    </div>

    <!-- Right Column (Sides + Drinks) -->
    <div class="w-5/14 p-2">
      <section>
        <header class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
          <h2 class="text-xl font-semibold font-fredoka"><u>Sides</u></h2>
        </header>

        <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1">
          <article
              v-for="group in groupedSides"
              :key="group.name"
              class="pt-2"
          >
            <div class="flex items-start justify-between gap-3">
              <h3 class="text-md font-semibold leading-snug font-fredoka">{{ group.name }}</h3>
              <div class="flex gap-2 flex-wrap">
                <div
                    v-for="v in group.variants"
                    :key="v.id"
                    class="flex items-center gap-1"
                >
                  <div class="text-xs">#{{ v.id }} {{ v.size }}</div>
                  <span
                      class="shrink-0 rounded-full px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-800">
                    {{ formatPrice(v.price) }}
                  </span>
                </div>
              </div>
            </div>
          </article>
        </div>
      </section>

      <section>
        <header class="flex flex-col pt-4 gap-2 sm:flex-row sm:items-center sm:justify-between">
          <h2 class="text-xl font-semibold font-fredoka"><u>Drinks</u></h2>
        </header>

        <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1">
          <article
              v-for="group in groupedDrinks"
              :key="group.name"
              class="pt-2"
          >
            <div class="flex items-start justify-between gap-3">
              <h3 class="text-md font-semibold leading-snug font-fredoka">{{ group.name }}</h3>
              <div class="flex gap-2 flex-wrap">
                <div
                    v-for="v in group.variants"
                    :key="v.id"
                    class="flex items-center gap-1"
                >
                  <div class="text-xs">#{{ v.id }} {{ v.size }}</div>
                  <span
                      class="shrink-0 rounded-full px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-800">
                    {{ formatPrice(v.price) }}
                  </span>
                </div>
              </div>
            </div>
          </article>
        </div>
      </section>
    </div>
  </div>
</template>

<script setup lang="ts">
import {ref, computed, onMounted, onBeforeMount} from 'vue'
import RecordButton from '@/components/RecordButton.vue'
import AudioPlayer from '@/components/AudioPlayer.vue'
import {watchEffect} from 'vue'

type AudioPlayerRef = {
  play: (url: string, opts?: { volume?: number; startAt?: number }) => Promise<void>
  pause: () => void
  stop: () => void
  setVolume: (v: number) => void
  isPlaying: boolean
  isReady: boolean
}
const myOrder = ref<OrderItem[]>([])
const defaultItems = ref<Burger[]>([])
const subtotal = computed(() =>
    (myOrder.value ?? []).reduce((sum, l) => sum + l.price * (l.quantity || 0), 0)
)
const tax = computed(() => subtotal.value * 0.08)
const total = computed(() => subtotal.value + tax.value)
const loading = ref(true)
const error = ref<string | null>(null)
const player = ref<AudioPlayerRef | null>(null)
const burgers = computed(() => defaultItems.value.filter(i => i.type === 'burger'))
const sides = computed(() => defaultItems.value.filter(i => i.type === 'side'))
const drinks = computed(() => defaultItems.value.filter(i => i.type === 'drink'))

/** ---------- Types ---------- */
/** Derived groups for right column */
type Variant = { id: number; size: string | null; price: number }
type SideGroup = { name: string; variants: Variant[] }
type Topping = string

type Burger = {
  id: number
  name: string
  type: 'burger' | 'side' | 'drink' | string
  category?: string | null
  toppings?: string[] | null
  size: string | null
  price: number
}

type OrderItem = Burger & {
  quantity: number
  remove: Topping[] | null
  add: Topping[] | null
}

function playDing() {
  player.value?.play('/wavs/newgreet.wav', {volume: 0.9}).catch(() => {
  })
}

function enableAudioOnce() {
  const handler = () => {
    playDing();
    window.removeEventListener('pointerdown', handler, {capture: true} as any)
  }
  window.addEventListener('pointerdown', handler, {once: true, capture: true} as any)
}

function playFromApi(url: string) {
  player.value?.play(url, {startAt: 0})
}
// fetch session order when page loads
async function loadOrder() {
  playDing()
  const res = await fetch('/order', {
    method: 'GET',
    headers: {'Accept': 'application/json'},
    credentials: 'include',            // <- send/receive session cookie
  })
  const json = await res.json()
  myOrder.value = Array.isArray(json.items)
      ? json.items
      : Object.values(json.items ?? {})
}
/** Emit handlers from RecordButton */
function handleUpdate(items: OrderItem[]) {
  myOrder.value = items
}

function handleTranscript(text: string) {
  // Optional: show somewhere, or toast, etc.
  console.log('Heard:', text)
}

function handleTTS(text: string) {
  // Optional: show somewhere, or toast, etc.
  console.log('play:', text)
  player.value?.play(text, {volume: 0.9})
}

/** Optional text command helper (uses /order/command if you kept it) */
async function sendTextCommand(text: string) {
  const res = await fetch('/order/command', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...getCsrfHeader(),          // <<< add this
    },
    credentials: 'include',        // keep session cookie
    body: JSON.stringify({text}),
  })
  const json = await res.json()
  handleUpdate(json.items ?? [])
}

function getCsrfHeader(): Record<string, string> {
  const headers: Record<string, string> = {}
  const meta = document.querySelector('meta[name="csrf-token"]') as HTMLMetaElement | null
  if (meta?.content) headers['X-CSRF-TOKEN'] = meta.content
  else {
    const cookie = document.cookie.split('; ').find(r => r.startsWith('XSRF-TOKEN='))
    if (cookie) headers['X-XSRF-TOKEN'] = decodeURIComponent(cookie.split('=')[1])
  }
  return headers
}

/** A stable key for v-for combining id/size/add/remove */
function lineKey(l: OrderItem) {
  const a = (l.add ?? []).slice().sort().join('|')
  const r = (l.remove ?? []).slice().sort().join('|')
  return `${l.id}-${l.size ?? 'none'}-${a}-${r}`
}

function formatPrice(n: number) {
  return new Intl.NumberFormat(undefined, {style: 'currency', currency: 'USD'}).format(n)
}

async function loadMenu() {
  loading.value = true
  error.value = null
  try {
    const res = await fetch('/api/menu', {
      headers: {Accept: 'application/json'},
      credentials: 'same-origin',
    })
    if (!res.ok) throw new Error(`HTTP ${res.status}`)
    const json = await res.json() as { items: Record<string, any> | any[] }
    // ✅ handle both shapes (array or object map)
    const incoming = Array.isArray(json.items)
        ? json.items
        : Object.values(json.items ?? {})
    defaultItems.value = incoming.map((i: any) => ({
      id: Number(i.id),
      name: String(i.name ?? '').trim(),
      type: String(i.type ?? '').trim().toLowerCase(), // 'burger' | 'side' | 'drink'
      category: i.category ?? null,
      toppings: Array.isArray(i.toppings) ? i.toppings : [],
      size: i.size ?? null,
      price: Number(i.price ?? 0),
    }))
  } catch (e: any) {
    error.value = e?.message ?? 'Failed to load menu'
  } finally {
    loading.value = false
  }
}

const groupedSides = computed<SideGroup[]>(() => {
  const byName = new Map<string, SideGroup>()
  for (const it of sides.value) {
    if (!byName.has(it.name)) byName.set(it.name, {name: it.name, variants: []})
    byName.get(it.name)!.variants.push({id: it.id, size: it.size ?? 'Regular', price: it.price})
  }
  const sizeOrder: Record<string, number> = {Regular: 0, Large: 1}
  return Array.from(byName.values())
      .map(g => ({
        ...g, variants: g.variants.sort((a, b) =>
            (sizeOrder[a.size ?? 'Regular'] ?? 99) - (sizeOrder[b.size ?? 'Regular'] ?? 99) || a.price - b.price)
      }))
      .sort((a, b) => a.name.localeCompare(b.name))
})

const groupedDrinks = computed<SideGroup[]>(() => {
  const byName = new Map<string, SideGroup>()
  for (const it of drinks.value) {
    if (!byName.has(it.name)) byName.set(it.name, {name: it.name, variants: []})
    byName.get(it.name)!.variants.push({id: it.id, size: it.size ?? 'Regular', price: it.price})
  }
  const sizeOrder: Record<string, number> = {Regular: 0, Large: 1}
  return Array.from(byName.values())
      .map(g => ({
        ...g, variants: g.variants.sort((a, b) =>
            (sizeOrder[a.size ?? 'Regular'] ?? 99) - (sizeOrder[b.size ?? 'Regular'] ?? 99) || a.price - b.price)
      }))
      .sort((a, b) => a.name.localeCompare(b.name))
})

onMounted(() => {
  loadOrder()
  loadMenu()
  enableAudioOnce()
})
</script>
